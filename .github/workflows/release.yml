name: deepray-release

on:
  release:
    types: [published]
    tags:
      - v*
  push:
    branches:
      - main
      - master
      - r*
      - hotfix
  pull_request:
    branches:
      - main
      - master
      - r*
      - hotfix

permissions:
  contents: read

env:
  MIN_PY_VERSION: '3.9'
  MAX_PY_VERSION: '3.11'

jobs:
  upload-dev-container:
    name: Upload dev container to DockerHub
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        py-version: [
            #  "3.9",
            "3.10",
            # "3.11"
          ]
        tf-version: ["2.15.0", "2.15.1"]
      fail-fast: false
    if: (github.event_name == 'push' && github.ref == 'refs/heads/hotfix')
    env:
      PY_VERSION: ${{ matrix.py-version }}
      TF_VERSION: ${{ matrix.tf-version }}
      IMAGE_NAME: hailinfufu/deepray-dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: tools/docker/dev_container.Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest-gpu-py${{ matrix.py-version }}-tf${{ matrix.tf-version }}-cu12.2.2-ubuntu22.04
          build-args: |
            PY_VERSION=${{ env.PY_VERSION }}
            TF_VERSION=${{ env.TF_VERSION }}
            TF_PACKAGE=tensorflow
            OS_VERSION=22.04
            CUDA_VERSION=12.2.2
          # Docker layer caching
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest-gpu-py${{ matrix.py-version }}-tf${{ matrix.tf-version }}-cu12.2.2-ubuntu22.04
          cache-to: type=inline

  release-wheel:
    name: Test and build release wheels
    needs: [upload-dev-container]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-22.04']
        py-version: ['3.10']
        tf-version: ['2.15.1']
        cpu: ['x86']
      fail-fast: false
    steps:
      # - name: Free Disk Space (Ubuntu)
      #   uses: jlumbroso/free-disk-space@main
      #   with:
      #     # this might remove tools that are actually needed,
      #     # if set to "true" but frees about 6 GB
      #     tool-cache: false

      #     # all of these default to true, but feel free to set to
      #     # "false" if necessary for your workflow
      #     android: true
      #     dotnet: true
      #     haskell: true
      #     large-packages: false
      #     docker-images: false
      #     swap-storage: false

      - name: bazel-github-actions-cache
        uses: tsawada/bazel-github-actions-cache@v0

      - uses: actions/github-script@0.3.0
        id: author-date
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
      - if: github.event_name == 'push'
        shell: bash
        run: echo "NIGHTLY_FLAG=--nightly" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Build wheels
        env:
          OS: ${{ runner.os }}
          PY_VERSION: ${{ matrix.py-version }}
          TF_VERSION: ${{ matrix.tf-version }}
          NIGHTLY_TIME: ${{ steps.author-date.outputs.result }}
          CPU: ${{ matrix.cpu }}
        shell: bash
        run: bash .github/workflows/make_wheel_${OS}_${CPU}.sh
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.py-version }}-tf${{ matrix.tf-version }}-${{ matrix.cpu }}-wheel
          path: artifacts

  upload-wheels:
    name: Publish wheels to PyPi
    needs: [release-wheel]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        os: ['Linux']
        py-version: ['3.10']
        tf-version: ['2.15.1']
        cpu: ['x86']
      fail-fast: false
    if: (github.event_name == 'push' && github.ref == 'refs/heads/hotfix') || github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.os }}-${{ matrix.py-version }}-tf${{ matrix.tf-version }}-${{ matrix.cpu }}-wheel
          path: ./dist
      - run: |
          set -e -x
          ls -la dist/
          sha256sum dist/*.whl
      - uses: pypa/gh-action-pypi-publish@v1.1.0
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}

  # upload-base-container:
  #   name: Upload base container to DockerHub
  #   needs: [release-wheel]
  #   runs-on: ubuntu-22.04
  #   strategy:
  #     matrix:
  #       py-version: [
  #           #  "3.9",
  #           "3.10",
  #           # "3.11"
  #         ]
  #       tf-version: ["2.15.1"]
  #     fail-fast: false
  #   if: (github.event_name == 'push' && github.ref == 'refs/heads/hotfix')
  #   env:
  #     PY_VERSION: ${{ matrix.py-version }}
  #     TF_VERSION: ${{ matrix.tf-version }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - run: |
  #         set -e -x
  #         bash tools/build_dev_container.sh ${PY_VERSION} ${TF_VERSION}
  #         docker push hailinfufu/deepray-dev:latest-gpu-py${PY_VERSION}-tf${TF_VERSION}-cu12.2.2-ubuntu22.04
