name: deepray-release

on:
  release:
    types: [published]
    tags:
      - v*
  push:
    branches:
      - main
      - master
      - r*
      - hotfix
  pull_request:
    branches:
      - main
      - master
      - r*
      - hotfix

permissions:
  contents: read
  packages: write # 为 artifact actions 添加写权限

env:
  MIN_PY_VERSION: '3.9'
  MAX_PY_VERSION: '3.11'
  DOCKER_IMAGE_BASE: hailinfufu/deepray-dev # 定义镜像名称为全局变量

jobs:
  # 第一步：构建并上传开发容器，同时输出完整的镜像标签
  build-and-upload-container:
    name: Build and Upload Dev Container
    runs-on: ubuntu-22.04
    # 仅在 hotfix 分支的 push 事件时运行
    if: github.event_name == 'push' && github.ref == 'refs/heads/hotfix'
    strategy:
      matrix:
        py-version: ["3.10"]
        tf-version: ["2.15.1"] # 构建 wheel 时通常针对一个确定的 TF 版本
      fail-fast: false
    outputs:
      # 声明此作业将输出一个名为 image_tag 的变量
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image with cache
        id: build_image # 给此步骤一个 id 以便在日志中识别
        uses: docker/build-push-action@v6
        with:
          context: .
          file: tools/docker/dev_container.Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE_BASE }}:latest-gpu-py${{ matrix.py-version }}-tf${{ matrix.tf-version }}-cu12.2.2-ubuntu22.04
          build-args: |
            PY_VERSION=${{ matrix.py-version }}
            TF_VERSION=${{ matrix.tf-version }}
            TF_PACKAGE=tensorflow
            OS_VERSION=22.04
            CUDA_VERSION=12.2.2
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_BASE }}:latest-gpu-py${{ matrix.py-version }}-tf${{ matrix.tf-version }}-cu12.2.2-ubuntu22.04
          cache-to: type=inline

      - name: Set Image Tag Output
        id: set_image_tag # 给此步骤 id，以便在 outputs 中引用
        run: |
          TAG="${{ env.DOCKER_IMAGE_BASE }}:latest-gpu-py${{ matrix.py-version }}-tf${{ matrix.tf-version }}-cu12.2.2-ubuntu22.04"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  # 第二步：在刚刚构建的容器内构建 Wheels
  build-wheels-in-container:
    name: Build Release Wheels in Container
    needs: [build-and-upload-container] # 依赖上一个 Job
    runs-on: ubuntu-22.04
    container:
      # 使用上一个 Job 构建的容器
      image: ${{ needs.build-and-upload-container.outputs.image_tag }}
      options: --gpus all # 如果构建需要 GPU

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true

      - name: bazel-github-actions-cache
        uses: tsawada/bazel-github-actions-cache@v0

      - name: Build wheels
        env:
          OS: "Linux"
          CPU: "x86"
          NIGHTLY_FLAG: ${{ (github.event_name == 'push') && '--nightly' || '' }}
        shell: bash
        # 构建脚本可能需要调整以在容器内正确运行
        run: bash .github/workflows/make_wheel_Linux_x86.sh

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86-wheel
          path: artifacts/

  # 第三步：发布 Wheels 到 PyPI
  upload-wheels:
    name: Publish wheels to PyPi
    needs: [build-wheels-in-container] # 依赖 wheel 构建 Job
    runs-on: ubuntu-22.04
    # 定义发布的触发条件
    if: (github.event_name == 'push' && github.ref == 'refs/heads/hotfix') || github.event_name == 'release'
    steps:
      - name: Download wheels artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-x86-wheel
          path: ./dist

      - name: Verify downloaded files
        run: |
          ls -la dist/
          sha256sum dist/*.whl

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.9.0
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
          